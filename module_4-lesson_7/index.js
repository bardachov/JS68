console.log("–ú–æ–¥—É–ª—å 4. –ó–∞–Ω—è—Ç—Ç—è 7. –ö–æ–ª–ª–±–µ–∫–∏. –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó. forEach");

/** –ü—Ä–∏–∫–ª–∞–¥–∏ –∑ –∫–∞—Ö—É—Ç—É */

// function foo (fn) {
//   fn()
// }

function logger(message) {
  // console.log(arguments)
  return true
}

// const logger = message => {
//   console.log(arguments)
//   return message
// }

// const logger = (a, b) => a + b
// const logger = (message, a) => message;
// const logger = (a, b) => {
//   return a + b
// }

// foo(logger)
// logger()




// ## Example 1 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

// –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:

// - `createProduct(obj, callback)` - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ id, –∞ —Ç–∞–∫–æ–∂
//   –∫–æ–ª–ª–±–µ–∫. –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É
//   –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å `id` —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–ª–±–µ–∫ –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
// - `logProduct(product)` - –∫–æ–ª–±–±–µ–∫ –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤
//   –∫–æ–Ω—Å–æ–ª—å
// - `logTotalPrice(product)` - –∫–æ–ª–±–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—ñ—é—î –∑–∞–≥–∞–ª—å–Ω—É 
//   –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å


/**
 * 1. –î–æ–¥–∞—Ç–∏ –¥–æ –æ–± º—î–∫—Ç–∞ ID
 * 2. –ü–µ—Ä–µ–¥–∞—Ç–∏ –æ–± º—î–∫—Ç –≤ –∫–æ–ª–±–µ–∫
 */
function createProduct (obj, callback) {
  const object = {
    ...obj,
    id: Date.now()
  }

  callback(object)
}

function logProduct (product) {
  // console.log(product)
}

function logTotalPrice(product) {
  // console.log(product.price * product.quantity)
}

function doubleQuantity({quantity}) {
  // console.log(quantity * 2)
}

const product = { name: 'Tomato', price: 10, quantity: 43 };
createProduct(product, doubleQuantity)

createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct);
createProduct({ name: 'Tomato', price: 10, quantity: 43 }, logTotalPrice)
















// ## Example 2 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

// –î–æ–¥–∞–π—Ç–µ –≤ –æ–±'—î–∫—Ç `account` –º–µ—Ç–æ–¥–∏ `withdraw(amount, onSuccess, onError)` —Ç–∞
// `deposit(amount, onSuccess, onError)`, –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –∞
// –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–ª–±–µ–∫–∏.

// –ú–µ—Ç–æ–¥ `withdraw` –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ
// this.balance, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// –ú–µ—Ç–æ–¥ `deposit` –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–µ
// –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É.

// ```js
// const TRANSACTION_LIMIT = 1000;

// const account = {
//   username: 'Jacob',
//   balance: 400,
//   withdraw(amount, onSuccess, onError) {
//     if (amount > TRANSACTION_LIMIT || amount > this.balance) {
//       onError({
//         message: "—Å—Ç–∞–ª–∞—Å—å –±—ñ–¥–∞. –õ—ñ–º—ñ—Ç –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –∞–±–æ –≥—Ä–æ—à–µ–π –Ω–µ–º–∞",
//         status: "ERROR"
//       })
//     } else {
//       onSuccess({
//         status: "OK",
//         message: "–û–ø–µ—Ä–∞—Ü—ñ—è withdraw —É—Å–ø—ñ—à–Ω–∞"
//       })
//     }
//   },
//   deposit(amount, onSuccess, onError) {
//     if (amount <= 0 || amount > TRANSACTION_LIMIT) {
//       onError({
//         message: "Deposit –Ω–µ –≤–¥–∞–≤—Å—è. –ë–æ —Å—É–º–∞ –º–µ–Ω—à–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—å. –ê–±–æ –ª—ñ–º—ñ—Ç –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ",
//         status: "ERROR DEPOSIT"
//       })
//     } else {
//       onSuccess({
//         message: '–í—Å–µ –≥—É–¥'
//       })
//     }
//   }
// };

// function handleSuccess({message, status = "OK"}) {
//   console.log(`${status}: ${message}`)
// }

// function handleError({message, status}) {
//   console.log(`${status}: ${message}`)
// } 

// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);
// ```






// ## Example 3 - –ö–æ–ª–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó

// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é `each(array, callback)`, —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î
// –º–∞—Å–∏–≤, –∞ –¥—Ä—É–≥–∏–º - —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É.
// –§—É–Ω–∫—Ü—ñ—è each –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
// –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–ª–±–µ–∫–∞.

/**
 * 1. —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –ø—É—Å—Ç–∏–π —Ä–µ–∑—É–ª—å—Ç—É—é—á–∏–π –º–∞—Å–∏–≤
 * 2. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Ü–∏–∫–ª –ø–æ –º–∞—Å–∏–≤—É.
 * 3. –í–∏–∫–ª–∏–∫–∞—Ç–∏ –∫–æ–ª–±–µ–∫ –Ω–∞ –∫–æ–∂–Ω—ñ–π —ñ—Ç–µ—Ä–∞—Ü—ñ—ó—ó —Ü–∏–∫–ª—É. –ü–µ—Ä–µ–¥–∞–≤—à–∏ –ø–æ—Ç–æ—á–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
 * 4. –î–æ–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–ª–±–µ–∫—É –≤ —Ä–µ–∑—É–ª—å—Ç—É—é—á–∏–π –º–∞—Å–∏–≤
 * 5. –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ —Ä–µ–∑—É–ª—å—Ç—É—é—á–∏–π –º–∞—Å–∏–≤
 */

// function each(array, callback) {
//   const result = [];

//   for(let element of array) {
//     //1
//     // const el = callback(element);
//     // result.push(el)
    
//     //2
//     result.push(callback(element))
//   }

//   return result
// }

// ```js

// const numbers = [64, 49, 36, 25, 16];

// const newNumbers = each(numbers, function (value) {
//   return value * 2;
// });

// console.log(newNumbers)

// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value * 2;
//   }),
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return value - 10;
//   }),
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return Math.sqrt(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.ceil(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.floor(value);
//   }),
// );

// const users = [{
//   name: "artem",
//   age: 30
// }];

// const res = each(users, function (user) {
//   return {
//     ...user,
//     name: user.name.toUpperCase()
//   }
// });

// console.log(res)

// ```

// ## Example 4 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// ```js

const fnName = arg => {return 'a'};

// const createProduct = (partialProduct, callback) => {
//   const product = { id: Date.now(), ...partialProduct };
//   callback(product);
// }

// function logProduct(product) {
//   console.log(product);
// }
// =
// const logProduct = product => console.log(product)

// function logTotalPrice(product) {
//   console.log(product.price * product.quantity);
// }
//=
// const logTotalPrice = product => console.log(product.price * product.quantity)

// createProduct({ name: 'üçé', price: 30, quantity: 3 }, logProduct);
// createProduct({ name: 'üçã', price: 20, quantity: 5 }, logTotalPrice);
// ```













// ## Example 5 - –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// ```js
const TRANSACTION_LIMIT = 1000;

const account = {
  username: 'Jacob',
  balance: 400,
  withdraw(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) {
      onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
    } else if (amount > this.balance) {
      onError(`Amount can't exceed account balance of ${this.balance} credits`);
    } else {
      this.balance -= amount;
      onSuccess(`Account balance: ${this.balance}`);
    }
  },
  deposit(amount, onSuccess, onError) {
    if (amount > TRANSACTION_LIMIT) {
      onError(`Amount should not exceed ${TRANSACTION_LIMIT} credits`);
    } else if (amount <= 0) {
      onError(`Amount must be more than 0 credits`);
    } else {
      this.balance += amount;
      onSuccess(`Account balance: ${this.balance}`);
    }
  },
};

// function handleSuccess(message) {
//   console.log(`‚úÖ Success! ${message}`);
// }
// function handleError(message) {
//   console.log(`‚ùå Error! ${message}`);
// }

// const handleSuccess = message => console.log(`‚úÖ Success! ${message}`);
// const handleError = message => console.log(`‚ùå Error! ${message}`);


// account.withdraw(2000, handleSuccess, handleError);
// account.withdraw(600, handleSuccess, handleError);
// account.withdraw(300, handleSuccess, handleError);
// account.deposit(1700, handleSuccess, handleError);
// account.deposit(0, handleSuccess, handleError);
// account.deposit(-600, handleSuccess, handleError);
// account.deposit(600, handleSuccess, handleError);
// ```

// ## Example 6 - –Ü–Ω–ª–∞–π–Ω —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.

// ```js
function each(array, callback) {
  const newArr = [];
  for (const el of array) {
    newArr.push(callback(el));
  }
  return newArr;
}

// console.log(
//   each([64, 49, 36, 25, 16], value => value * 2),
// );
// console.log(
//   each([64, 49, 36, 25, 16], value => value - 10),
// );
// console.log(
//   each([64, 49, 36, 25, 16], function (value) {
//     return Math.sqrt(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.ceil(value);
//   }),
// );
// console.log(
//   each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
//     return Math.floor(value);
//   }),
// );

// const res = each(users, user => {
//   return {
//     ...user,
//     name: user.name.toUpperCase()
//   }
// });
//==
// const users = [{
//   name: "artem",
//   age: 30
// }];

// console.log(each(users, user => ({
//     ...user,
//     name: user.name.toUpperCase()
//   })
// ))

// ```



// ## Example 7 - –ú–µ—Ç–æ–¥ forEach

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// ```js
function logItems(items) {
  console.log(items);
  
  //1
  // const fn = (item, index) => {
  //   console.log(`${index + 1} - ${item}`);
  // }
  // items.forEach(fn)

  //2 
  items.forEach( el => console.log(el))

  // for (let i = 0; i < items.length; i += 1) {
  //   console.log(`${i + 1} - ${items[i]}`);
  // }
}

// logItems(['Mango', 'Poly', 'Ajax']);
// logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);
// ```


















// ## Example 8 - –ú–µ—Ç–æ–¥ forEach

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// ```js
function printContactsInfo({ names, phones }) {
  const nameList = names.split(',');
  const phoneList = phones.split(',');
  
  nameList.forEach((name, i) => {
    // console.log(`${name}: ${phoneList[i]}`);
    console.log(`${nameList[i]}: ${phoneList[i]}`);
  })

  // for (let i = 0; i < nameList.length; i += 1) {
  //   console.log(`${nameList[i]}: ${phoneList[i]}`);
  // }
}


// [{
//   name: "user",
//   age: 123
// }].forEach(({age}) => console.log(age))

// printContactsInfo({
//   names: 'Jacob,William,Solomon,Artemis',
//   phones: '89001234567,89001112233,890055566377,890055566300',
// });
// ```















// ## Example 9 - –ú–µ—Ç–æ–¥ forEach

// –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É `forEach` —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.

// ```js
function cal—ÅulateAverage(...args) {
  let total = 0;
  
  args.forEach( arg => total += arg)

  // for (let i = 0; i < args.length; i++) {
  //   total += args[i];
  // }

  return total / args.length;
}

console.log(cal—ÅulateAverage(1, 2, 3, 4)); // 2.5
console.log(cal—ÅulateAverage(14, 8, 2)); // 8
console.log(cal—ÅulateAverage(27, 43, 2, 8, 36)); // 23.2
// ```